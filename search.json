[
  {
    "objectID": "posts/my-ncaa-predictions-went-wrong/index.html",
    "href": "posts/my-ncaa-predictions-went-wrong/index.html",
    "title": "I finally filled my first ever NCAA bracket using Machine Learning",
    "section": "",
    "text": "I have been in the United States for about four years now. I never could understand the craziness behind the NCAA tournament and more importantly the ritual of filling out a bracket. I never bothered to fill one out until my senior year in college. The reason for that is, I am taking an advanced sports data class and we use machine learning and algorithms to predict the outcomes for all the games in every region.\nThis was a competition between my classmates, myself and the instructor. That would be a total group of 17 people.\nThroughout February and beginning of March, we spent most of our time in class coming up with a model which predicts who would win and lose a basketball game based on some given predictors.\nI am going to be very honest; I am not an avid college basketball fan and I definitely do prefer the National Basketball Association (NBA). I had no idea and solely left my model do the talking, some of the picks based on my model, were the most bizarre ones I have ever seen in my life.\nThe predictors I selected were fairly simple. I went with points per possession, rebounding and effective field goal percentage. Points per possession simply tells you how good a team is per possession, naturally if a team has more possessions than the opponent, they naturally should win that game. Rebounding is another important factor, the more you crash the glass whether its defensively or offensively, it is likely that you are doing better than the opponent. The last predictor was effective field goal percentage, this metric speaks for itself, it tells you effective your team is at shooting the ball.\n\n\nCode\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(hoopR)\nlibrary(zoo)\nlibrary(bonsai)\n\nset.seed(1234)\n\nteamgames <- load_mbb_team_box(seasons = 2015:2023) %>%\n  filter(game_date < as.Date(\"2023-03-14\"))\n\nteamstats <- teamgames %>% \n  mutate(\n    possessions = field_goals_attempted - offensive_rebounds + turnovers + (.475 * free_throws_attempted),\n    ppp = team_score/possessions,\n    total_rebounds = defensive_rebounds + offensive_rebounds,\n    effective_field_goal_percentage = (field_goals_made + .5 * three_point_field_goals_made) / field_goals_attempted,\n)\n\nrollingteamstats <- teamstats  %>% \n  arrange(game_date) %>%\n  group_by(team_short_display_name, season) %>%\n  mutate(\n    team_score = ((field_goals_made-three_point_field_goals_made) * 2) + (three_point_field_goals_made*3) + free_throws_made,\n    team_rolling_ppp = rollmean(lag(ppp, n=1), k=5, align=\"right\", fill=NA), \n    team_total_rebounds = rollmean(lag(total_rebounds, n=1), k=5, align=\"right\", fill=NA),\n    team_efg = rollmean(lag(effective_field_goal_percentage, n=1), k=5, align=\"right\", fill=NA),\n    ) %>% \n  ungroup()\n\nteam_side <- rollingteamstats %>%\n  select(\n    game_id,\n    team_id, \n    team_short_display_name, \n    opponent_team_id, \n    game_date, \n    season, \n    team_score, \n    team_rolling_ppp,\n    team_total_rebounds,\n    team_efg\n    ) %>% \n  na.omit()\n\nopponent_side <- team_side %>%\n  select(-opponent_team_id) %>% \n  rename(\n    opponent_team_id = team_id,\n    opponent_short_display_name = team_short_display_name,\n    opponent_score = team_score,\n    opponent_rolling_ppp = team_rolling_ppp, \n    opponent_total_rebounds = team_total_rebounds,\n    opponent_efg = team_efg\n  ) \n\n\ngames <- team_side %>% inner_join(opponent_side)\n\ngames <- games %>% mutate(\n  team_result = as.factor(case_when(\n    team_score > opponent_score ~ \"W\",\n    opponent_score > team_score ~ \"L\"\n))) %>% na.omit()\n\nmodelgames <- games %>% \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_short_display_name, \n    season, \n    team_rolling_ppp, \n    opponent_rolling_ppp, \n    team_total_rebounds,\n    opponent_total_rebounds,\n    team_efg,\n    opponent_efg,\n    team_result\n    ) %>% \n  na.omit()\n\ngame_split <- initial_split(modelgames, prop = .8)\ngame_train <- training(game_split)\ngame_test <- testing(game_split)\n\n\nlog_mod <- \n  logistic_reg() %>% \n  set_engine(\"glm\") %>%\n  set_mode(\"classification\")\n\nlightgbm_mod <- \n  boost_tree() %>%\n  set_engine(\"lightgbm\") %>%\n  set_mode(mode = \"classification\")\n\ngame_recipe <- \n  recipe(team_result ~ ., data = game_split) %>% \n  update_role(game_id, game_date, team_short_display_name, opponent_short_display_name, season, new_role = \"ID\") %>%\n  step_normalize(all_predictors())\n\nsummary(game_recipe)\n\n\n# A tibble: 12 × 4\n   variable                    type      role      source  \n   <chr>                       <list>    <chr>     <chr>   \n 1 game_id                     <chr [2]> ID        original\n 2 game_date                   <chr [1]> ID        original\n 3 team_short_display_name     <chr [3]> ID        original\n 4 opponent_short_display_name <chr [3]> ID        original\n 5 season                      <chr [2]> ID        original\n 6 team_rolling_ppp            <chr [2]> predictor original\n 7 opponent_rolling_ppp        <chr [2]> predictor original\n 8 team_total_rebounds         <chr [2]> predictor original\n 9 opponent_total_rebounds     <chr [2]> predictor original\n10 team_efg                    <chr [2]> predictor original\n11 opponent_efg                <chr [2]> predictor original\n12 team_result                 <chr [3]> outcome   original\n\n\nCode\nlightgbm_workflow <- \n  workflow() %>% \n  add_model(lightgbm_mod) %>% \n  add_recipe(game_recipe)\n\nlightgbm_fit <- \n  lightgbm_workflow %>% \n  fit(data = game_train)\n\nrollingteamstats <- teamstats  %>% \n  arrange(game_date) %>%\n  group_by(team_short_display_name, season) %>%\n  mutate(\n    team_score = ((field_goals_made-three_point_field_goals_made) * 2) + (three_point_field_goals_made*3) + free_throws_made,\n    team_rolling_ppp = rollmean(ppp, k=5, align=\"right\", fill=NA), \n    team_total_rebounds = rollmean(total_rebounds, k=5, align=\"right\", fill=NA),\n    team_efg = rollmean(effective_field_goal_percentage, k=5, align=\"right\", fill=NA),\n    ) %>% \n  ungroup()\n\nteam_side <- rollingteamstats %>%\n  select(\n    game_id,\n    team_id, \n    team_short_display_name, \n    opponent_team_id, \n    game_date, \n    season, \n    team_score, \n    team_rolling_ppp,\n    team_total_rebounds,\n    team_efg\n    ) %>% \n  na.omit()\n\nopponent_side <- team_side %>%\n  select(-opponent_team_id) %>% \n  rename(\n    opponent_team_id = team_id,\n    opponent_short_display_name = team_short_display_name,\n    opponent_score = team_score,\n    opponent_rolling_ppp = team_rolling_ppp, \n    opponent_total_rebounds = team_total_rebounds,\n    opponent_efg = team_efg\n  )\n\ngames <- team_side %>% inner_join(opponent_side)\n\ngames <- games %>% mutate(\n  team_result = as.factor(case_when(\n    team_score > opponent_score ~ \"W\",\n    opponent_score > team_score ~ \"L\"\n))) %>% na.omit()\n\nmodelgames <- games %>% \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_short_display_name, \n    season, \n    team_rolling_ppp, \n    opponent_rolling_ppp, \n    team_total_rebounds,\n    opponent_total_rebounds,\n    team_efg,\n    opponent_efg,\n    team_result\n    ) %>% \n  na.omit()\n\nmidwestround1games <- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"N Kentucky\"\n) %>% add_row(\n  team_short_display_name=\"Iowa\",\n  opponent_short_display_name=\"Auburn\"\n)%>% add_row(\n  team_short_display_name=\"Miami\",\n  opponent_short_display_name=\"Drake\"\n)%>% add_row(\n  team_short_display_name=\"Indiana\",\n  opponent_short_display_name=\"Kent State\"\n)%>% add_row(\n  team_short_display_name=\"Iowa State\",\n  opponent_short_display_name=\"Pitt\"\n)%>% add_row(\n  team_short_display_name=\"Xavier\",\n  opponent_short_display_name=\"Kennesaw St\"\n)%>% add_row(\n  team_short_display_name=\"Texas A&M\",\n  opponent_short_display_name=\"Penn State\"\n)%>% add_row(\n  team_short_display_name=\"Texas\",\n  opponent_short_display_name=\"Colgate\"\n)\n\nmidwestround1games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(midwestround1games)\n\nmidwestround1games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(midwestround1games) \n\n\nmidwestround1 <- lightgbm_fit %>% \n  predict(new_data = midwestround1games) %>%\n  bind_cols(midwestround1games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround1 <- lightgbm_fit %>% \n  predict(new_data = midwestround1games, type=\"prob\") %>%\n  bind_cols(midwestround1) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround1\n\n\n# A tibble: 8 × 14\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ game_id\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <int>\n1 W             0.664   0.336 Iowa       Auburn     1.06    27.6   0.519  4.02e8\n2 L             0.356   0.644 Texas      Colgate    1.19    35.2   0.604  4.02e8\n3 L             0.497   0.503 Miami      Drake      1.13    33     0.554  4.02e8\n4 W             0.611   0.389 Xavier     Kennes…    1.08    36     0.543  4.02e8\n5 L             0.295   0.705 Indiana    Kent S…    1.20    37.2   0.559  4.02e8\n6 L             0.363   0.637 Houston    N Kent…    1.16    32     0.540  4.02e8\n7 W             0.507   0.493 Texas A&M  Penn S…    1.06    34     0.523  4.02e8\n8 L             0.276   0.724 Iowa State Pitt       1.22    31.2   0.549  4.02e8\n# … with 5 more variables: game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_total_rebounds <dbl>, team_efg <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_ppp,\n#   ⁴​opponent_total_rebounds, ⁵​opponent_efg\n\n\nCode\nmidwestround2games <- tibble(\n  team_short_display_name=\"N Kentucky\",\n  opponent_short_display_name=\"Iowa\"\n) %>% add_row(\n  team_short_display_name=\"Drake\",\n  opponent_short_display_name=\"Kent State\"\n)%>% add_row(\n  team_short_display_name=\"Pitt\",\n  opponent_short_display_name=\"Xavier\"\n)%>% add_row(\n  team_short_display_name=\"Texas A&M\",\n  opponent_short_display_name=\"Colgate\"\n)\n\nmidwestround2games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(midwestround2games)\n\nmidwestround2games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(midwestround2games) \n\n\nmidwestround2 <- lightgbm_fit %>% \n  predict(new_data = midwestround2games) %>%\n  bind_cols(midwestround2games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround2 <- lightgbm_fit %>% \n  predict(new_data = midwestround2games, type=\"prob\") %>%\n  bind_cols(midwestround2) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround2\n\n\n# A tibble: 4 × 14\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ game_id\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <int>\n1 L             0.373   0.627 Texas A&M  Colgate    1.19    35.2   0.604  4.02e8\n2 L             0.440   0.560 N Kentucky Iowa       1.16    34.6   0.518  4.02e8\n3 L             0.396   0.604 Drake      Kent S…    1.20    37.2   0.559  4.02e8\n4 W             0.602   0.398 Pitt       Xavier     1.16    38.6   0.538  4.02e8\n# … with 5 more variables: game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_total_rebounds <dbl>, team_efg <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_ppp,\n#   ⁴​opponent_total_rebounds, ⁵​opponent_efg\n\n\nCode\nmidwestround3games <- tibble(\n  team_short_display_name=\"Kent State\",\n  opponent_short_display_name=\"Iowa\"\n) %>% add_row(\n  team_short_display_name=\"Xavier\",\n  opponent_short_display_name=\"Colgate\"\n)\n\nmidwestround3games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(midwestround3games)\n\nmidwestround3games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(midwestround3games) \n\n\nmidwestround3 <- lightgbm_fit %>% \n  predict(new_data = midwestround3games) %>%\n  bind_cols(midwestround3games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround3 <- lightgbm_fit %>% \n  predict(new_data = midwestround3games, type=\"prob\") %>%\n  bind_cols(midwestround3) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround3\n\n\n# A tibble: 2 × 14\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ game_id\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <int>\n1 L             0.486   0.514 Xavier     Colgate    1.19    35.2   0.604  4.02e8\n2 W             0.605   0.395 Kent State Iowa       1.16    34.6   0.518  4.02e8\n# … with 5 more variables: game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_total_rebounds <dbl>, team_efg <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_ppp,\n#   ⁴​opponent_total_rebounds, ⁵​opponent_efg\n\n\nCode\nmidwestround4games <- tibble(\n  team_short_display_name=\"Kent State\",\n  opponent_short_display_name=\"Colgate\"\n)\n\nmidwestround4games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(midwestround4games)\n\nmidwestround4games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(midwestround4games) \n\n\nmidwestround4 <- lightgbm_fit %>% \n  predict(new_data = midwestround4games) %>%\n  bind_cols(midwestround4games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround4 <- lightgbm_fit %>% \n  predict(new_data = midwestround4games, type=\"prob\") %>%\n  bind_cols(midwestround4) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround4\n\n\n# A tibble: 1 × 14\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ game_id\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <int>\n1 W             0.591   0.409 Kent State Colgate    1.19    35.2   0.604  4.02e8\n# … with 5 more variables: game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_total_rebounds <dbl>, team_efg <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_ppp,\n#   ⁴​opponent_total_rebounds, ⁵​opponent_efg\n\n\nCode\nwestround1games <- tibble(\n  team_short_display_name=\"Kansas\",\n  opponent_short_display_name=\"Howard\"\n) %>% add_row(\n  team_short_display_name=\"Arkansas\",\n  opponent_short_display_name=\"Illinois\"\n)%>% add_row(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_short_display_name=\"VCU\"\n)%>% add_row(\n  team_short_display_name=\"UConn\",\n  opponent_short_display_name=\"Iona\"\n)%>% add_row(\n  team_short_display_name=\"Nevada\",\n  opponent_short_display_name=\"TCU\"\n)%>% add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_short_display_name=\"Grand Canyon\"\n)%>% add_row(\n  team_short_display_name=\"Northwestern\",\n  opponent_short_display_name=\"Boise St\"\n)%>% add_row(\n  team_short_display_name=\"UCLA\",\n  opponent_short_display_name=\"UNC Asheville\"\n)\n\nwestround1games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(westround1games)\n\nwestround1games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(westround1games) \n\n\nwestround1 <- lightgbm_fit %>% \n  predict(new_data = westround1games) %>%\n  bind_cols(westround1games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround1 <- lightgbm_fit %>% \n  predict(new_data = westround1games, type=\"prob\") %>%\n  bind_cols(westround1) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nwestround1\n\n\n# A tibble: 8 × 14\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ game_id\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <int>\n1 L             0.427   0.573 Northwest… Boise …    1.07    32.4   0.523  4.02e8\n2 W             0.574   0.426 Gonzaga    Grand …    1.19    33     0.635  4.02e8\n3 L             0.310   0.690 Kansas     Howard     1.13    39.8   0.562  4.02e8\n4 L             0.473   0.527 Arkansas   Illino…    1.03    35     0.484  4.02e8\n5 L             0.423   0.577 UConn      Iona       1.21    36     0.530  4.02e8\n6 L             0.492   0.508 Nevada     TCU        1.03    35.4   0.476  4.02e8\n7 L             0.422   0.578 UCLA       UNC As…    1.11    36.4   0.559  4.02e8\n8 L             0.405   0.595 Saint Mar… VCU        1.15    34.4   0.574  4.02e8\n# … with 5 more variables: game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_total_rebounds <dbl>, team_efg <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_ppp,\n#   ⁴​opponent_total_rebounds, ⁵​opponent_efg\n\n\nCode\nwestround2games <- tibble(\n  team_short_display_name=\"Illinois\",\n  opponent_short_display_name=\"Howard\"\n) %>% add_row(\n  team_short_display_name=\"VCU\",\n  opponent_short_display_name=\"UConn\"\n)%>% add_row(\n  team_short_display_name=\"TCU\",\n  opponent_short_display_name=\"Gonzaga\"\n)%>% add_row(\n  team_short_display_name=\"Boise St\",\n  opponent_short_display_name=\"UNC Asheville\"\n)\n\nwestround2games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(westround2games)\n\nwestround2games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(westround2games) \n\n\nwestround2 <- lightgbm_fit %>% \n  predict(new_data = westround2games) %>%\n  bind_cols(westround2games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround2 <- lightgbm_fit %>% \n  predict(new_data = westround2games, type=\"prob\") %>%\n  bind_cols(westround2) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nwestround2\n\n\n# A tibble: 4 × 14\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ game_id\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <int>\n1 L             0.260   0.740 TCU        Gonzaga    1.33    36     0.626  4.02e8\n2 L             0.384   0.616 Illinois   Howard     1.13    39.8   0.562  4.02e8\n3 L             0.467   0.533 VCU        UConn      1.18    37.6   0.567  4.02e8\n4 L             0.434   0.566 Boise St   UNC As…    1.11    36.4   0.559  4.02e8\n# … with 5 more variables: game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_total_rebounds <dbl>, team_efg <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_ppp,\n#   ⁴​opponent_total_rebounds, ⁵​opponent_efg\n\n\nCode\nwestround3games <- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_short_display_name=\"Howard\"\n) %>% add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_short_display_name=\"UNC Asheville\"\n)\n\nwestround3games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(westround3games)\n\nwestround3games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(westround3games) \n\n\nwestround3 <- lightgbm_fit %>% \n  predict(new_data = westround3games) %>%\n  bind_cols(westround3games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround3 <- lightgbm_fit %>% \n  predict(new_data = westround3games, type=\"prob\") %>%\n  bind_cols(westround3) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nwestround3\n\n\n# A tibble: 2 × 14\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ game_id\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <int>\n1 W             0.540   0.460 UConn      Howard     1.13    39.8   0.562  4.02e8\n2 W             0.716   0.284 Gonzaga    UNC As…    1.11    36.4   0.559  4.02e8\n# … with 5 more variables: game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_total_rebounds <dbl>, team_efg <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_ppp,\n#   ⁴​opponent_total_rebounds, ⁵​opponent_efg\n\n\nCode\nwestround4games <- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_short_display_name=\"Gonzaga\"\n)\n\nwestround4games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(westround4games)\n\nwestround4games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(westround4games) \n\n\nwestround4 <- lightgbm_fit %>% \n  predict(new_data = westround4games) %>%\n  bind_cols(westround4games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround4 <- lightgbm_fit %>% \n  predict(new_data = westround4games, type=\"prob\") %>%\n  bind_cols(westround4) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nwestround4\n\n\n# A tibble: 1 × 14\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ game_id\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <int>\n1 L             0.404   0.596 UConn      Gonzaga    1.33      36   0.626  4.02e8\n# … with 5 more variables: game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_total_rebounds <dbl>, team_efg <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_ppp,\n#   ⁴​opponent_total_rebounds, ⁵​opponent_efg\n\n\nCode\nsouthround1games <- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Texas A&M-CC\"\n) %>% add_row(\n  team_short_display_name=\"Maryland\",\n  opponent_short_display_name=\"West Virginia\"\n)%>% add_row(\n  team_short_display_name=\"San Diego St\",\n  opponent_short_display_name=\"Charleston\"\n)%>% add_row(\n  team_short_display_name=\"Virginia\",\n  opponent_short_display_name=\"Furman\"\n)%>% add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_short_display_name=\"NC State\"\n)%>% add_row(\n  team_short_display_name=\"Baylor\",\n  opponent_short_display_name=\"UCSB\"\n)%>% add_row(\n  team_short_display_name=\"Missouri\",\n  opponent_short_display_name=\"Utah State\"\n)%>% add_row(\n  team_short_display_name=\"Arizona\",\n  opponent_short_display_name=\"Princeton\"\n)\n\nsouthround1games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(southround1games)\n\nsouthround1games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(southround1games) \n\n\nsouthround1 <- lightgbm_fit %>% \n  predict(new_data = southround1games) %>%\n  bind_cols(southround1games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround1 <- lightgbm_fit %>% \n  predict(new_data = southround1games, type=\"prob\") %>%\n  bind_cols(southround1) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround1\n\n\n# A tibble: 8 × 14\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ game_id\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <int>\n1 L             0.317   0.683 San Diego… Charle…    1.11    40.4   0.484  4.02e8\n2 L             0.417   0.583 Virginia   Furman     1.17    32.6   0.555  4.02e8\n3 W             0.553   0.447 Creighton  NC Sta…    1.12    31.4   0.534  4.02e8\n4 W             0.506   0.494 Arizona    Prince…    1.07    38.8   0.498  4.02e8\n5 L             0.487   0.513 Alabama    Texas …    1.19    36.2   0.531  4.02e8\n6 L             0.283   0.717 Baylor     UCSB       1.18    29     0.559  4.02e8\n7 L             0.463   0.537 Missouri   Utah S…    1.12    36.8   0.563  4.02e8\n8 W             0.562   0.438 Maryland   West V…    1.06    32.4   0.513  4.02e8\n# … with 5 more variables: game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_total_rebounds <dbl>, team_efg <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_ppp,\n#   ⁴​opponent_total_rebounds, ⁵​opponent_efg\n\n\nCode\nsouthround2games <- tibble(\n  team_short_display_name=\"Texas A&M-CC\",\n  opponent_short_display_name=\"West Virginia\"\n) %>% add_row(\n  team_short_display_name=\"Charleston\",\n  opponent_short_display_name=\"Furman\"\n)%>% add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_short_display_name=\"UCSB\"\n)%>% add_row(\n  team_short_display_name=\"Utah State\",\n  opponent_short_display_name=\"Princeton\"\n)\nsouthround2games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(southround2games)\n\nsouthround2games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(southround2games) \n\n\nsouthround2 <- lightgbm_fit %>% \n  predict(new_data = southround2games) %>%\n  bind_cols(southround2games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround2 <- lightgbm_fit %>% \n  predict(new_data = southround2games, type=\"prob\") %>%\n  bind_cols(southround2) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround2\n\n\n# A tibble: 4 × 14\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ game_id\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <int>\n1 W             0.533   0.467 Charleston Furman     1.17    32.6   0.555  4.02e8\n2 W             0.514   0.486 Utah State Prince…    1.07    38.8   0.498  4.02e8\n3 W             0.530   0.470 Creighton  UCSB       1.18    29     0.559  4.02e8\n4 W             0.639   0.361 Texas A&M… West V…    1.06    32.4   0.513  4.02e8\n# … with 5 more variables: game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_total_rebounds <dbl>, team_efg <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_ppp,\n#   ⁴​opponent_total_rebounds, ⁵​opponent_efg\n\n\nCode\nsouthround3games <- tibble(\n  team_short_display_name=\"Texas A&M-CC\",\n  opponent_short_display_name=\"Furman\"\n) %>% add_row(\n  team_short_display_name=\"UCSB\",\n  opponent_short_display_name=\"Princeton\"\n)\n\nsouthround3games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(southround3games)\n\nsouthround3games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(southround3games) \n\n\nsouthround3 <- lightgbm_fit %>% \n  predict(new_data = southround3games) %>%\n  bind_cols(southround3games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround3 <- lightgbm_fit %>% \n  predict(new_data = southround3games, type=\"prob\") %>%\n  bind_cols(southround3) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround3\n\n\n# A tibble: 2 × 14\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ game_id\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <int>\n1 W             0.523   0.477 Texas A&M… Furman     1.17    32.6   0.555  4.02e8\n2 W             0.551   0.449 UCSB       Prince…    1.07    38.8   0.498  4.02e8\n# … with 5 more variables: game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_total_rebounds <dbl>, team_efg <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_ppp,\n#   ⁴​opponent_total_rebounds, ⁵​opponent_efg\n\n\nCode\nsouthround4games <- tibble(\n  team_short_display_name=\"Texas A&M-CC\",\n  opponent_short_display_name=\"Princeton\"\n) \n\nsouthround4games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(southround4games)\n\nsouthround4games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(southround4games) \n\n\nsouthround4 <- lightgbm_fit %>% \n  predict(new_data = southround4games) %>%\n  bind_cols(southround4games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround4 <- lightgbm_fit %>% \n  predict(new_data = southround4games, type=\"prob\") %>%\n  bind_cols(southround4) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround4 \n\n\n# A tibble: 1 × 14\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ game_id\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <int>\n1 W             0.601   0.399 Texas A&M… Prince…    1.07    38.8   0.498  4.02e8\n# … with 5 more variables: game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_total_rebounds <dbl>, team_efg <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_ppp,\n#   ⁴​opponent_total_rebounds, ⁵​opponent_efg\n\n\nCode\neastround1games <- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_short_display_name=\"Fair Dickinson\"\n) %>% add_row(\n  team_short_display_name=\"Memphis\",\n  opponent_short_display_name=\"FAU\"\n)%>% add_row(\n  team_short_display_name=\"Duke\",\n  opponent_short_display_name=\"Oral Roberts\"\n)%>% add_row(\n  team_short_display_name=\"Tennessee\",\n  opponent_short_display_name=\"Louisiana\"\n)%>% add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_short_display_name=\"Providence\"\n)%>% add_row(\n  team_short_display_name=\"Kansas St\",\n  opponent_short_display_name=\"Montana St\"\n)%>% add_row(\n  team_short_display_name=\"Michigan St\",\n  opponent_short_display_name=\"USC\"\n)%>% add_row(\n  team_short_display_name=\"Marquette\",\n  opponent_short_display_name=\"Vermont\"\n)\n\neastround1games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(eastround1games)\n\neastround1games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(eastround1games) \n\n\neastround1 <- lightgbm_fit %>% \n  predict(new_data = eastround1games) %>%\n  bind_cols(eastround1games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround1 <- lightgbm_fit %>% \n  predict(new_data = eastround1games, type=\"prob\") %>%\n  bind_cols(eastround1) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\neastround1\n\n\n# A tibble: 8 × 14\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ game_id\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <int>\n1 L             0.459   0.541 Memphis    FAU        1.15    39.4   0.557  4.02e8\n2 W             0.500   0.500 Purdue     Fair D…    1.16    36.4   0.525  4.02e8\n3 W             0.553   0.447 Tennessee  Louisi…    1.09    37.4   0.534  4.02e8\n4 L             0.477   0.523 Kansas St  Montan…    1.13    34.4   0.516  4.02e8\n5 L             0.481   0.519 Duke       Oral R…    1.18    35.4   0.529  4.02e8\n6 W             0.707   0.293 Kentucky   Provid…    1.12    30.2   0.493  4.02e8\n7 W             0.568   0.432 Michigan … USC        1.07    37.6   0.521  4.02e8\n8 L             0.389   0.611 Marquette  Vermont    1.19    30.4   0.594  4.02e8\n# … with 5 more variables: game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_total_rebounds <dbl>, team_efg <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_ppp,\n#   ⁴​opponent_total_rebounds, ⁵​opponent_efg\n\n\nCode\neastround2games <- tibble(\n  team_short_display_name=\"Fair Dickinson\",\n  opponent_short_display_name=\"FAU\"\n) %>% add_row(\n  team_short_display_name=\"Oral Roberts\",\n  opponent_short_display_name=\"Tennessee\"\n)%>% add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_short_display_name=\"Montana St\"\n)%>% add_row(\n  team_short_display_name=\"Michigan St\",\n  opponent_short_display_name=\"Vermont\"\n)\neastround2games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(eastround2games)\n\neastround2games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(eastround2games) \n\n\neastround2 <- lightgbm_fit %>% \n  predict(new_data = eastround2games) %>%\n  bind_cols(eastround2games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround2 <- lightgbm_fit %>% \n  predict(new_data = eastround2games, type=\"prob\") %>%\n  bind_cols(eastround2) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\neastround2\n\n\n# A tibble: 4 × 14\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ game_id\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <int>\n1 L             0.432   0.568 Fair Dick… FAU        1.15    39.4   0.557  4.02e8\n2 W             0.573   0.427 Kentucky   Montan…    1.13    34.4   0.516  4.02e8\n3 W             0.526   0.474 Oral Robe… Tennes…    1.18    35     0.570  4.02e8\n4 W             0.503   0.497 Michigan … Vermont    1.19    30.4   0.594  4.02e8\n# … with 5 more variables: game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_total_rebounds <dbl>, team_efg <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_ppp,\n#   ⁴​opponent_total_rebounds, ⁵​opponent_efg\n\n\nCode\neastround3games <- tibble(\n  team_short_display_name=\"FAU\",\n  opponent_short_display_name=\"Oral Roberts\"\n) %>% add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_short_display_name=\"Michigan St\"\n)\n\neastround3games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(eastround3games)\n\neastround3games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(eastround3games) \n\n\neastround3 <- lightgbm_fit %>% \n  predict(new_data = eastround3games) %>%\n  bind_cols(eastround3games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround3 <- lightgbm_fit %>% \n  predict(new_data = eastround3games, type=\"prob\") %>%\n  bind_cols(eastround3) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\neastround3\n\n\n# A tibble: 2 × 14\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ game_id\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <int>\n1 L             0.467   0.533 Kentucky   Michig…    1.20    32.2   0.581  4.02e8\n2 L             0.493   0.507 FAU        Oral R…    1.18    35.4   0.529  4.02e8\n# … with 5 more variables: game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_total_rebounds <dbl>, team_efg <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_ppp,\n#   ⁴​opponent_total_rebounds, ⁵​opponent_efg\n\n\nCode\neastround4games <- tibble(\n  team_short_display_name=\"Oral Roberts\",\n  opponent_short_display_name=\"Kentucky\"\n) \n\neastround4games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(eastround4games)\n\neastround4games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(eastround4games) \n\n\neastround4 <- lightgbm_fit %>% \n  predict(new_data = eastround4games) %>%\n  bind_cols(eastround4games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround4 <- lightgbm_fit %>% \n  predict(new_data = eastround4games, type=\"prob\") %>%\n  bind_cols(eastround4) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\neastround4\n\n\n# A tibble: 1 × 14\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ game_id\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <int>\n1 W             0.590   0.410 Oral Robe… Kentuc…    1.15    42.6   0.517  4.02e8\n# … with 5 more variables: game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_total_rebounds <dbl>, team_efg <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_ppp,\n#   ⁴​opponent_total_rebounds, ⁵​opponent_efg\n\n\nCode\nfinalfourgames <- tibble(\n  team_short_display_name=\"Texas A&M-CC\",\n  opponent_short_display_name=\"Oral Roberts\"\n) %>% add_row(\n  team_short_display_name=\"Colgate\",\n  opponent_short_display_name=\"Gonzaga\"\n)\n\nfinalfourgames <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(finalfourgames)\n\nfinalfourgames <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(finalfourgames) \n\n\nfinalfour <- lightgbm_fit %>% \n  predict(new_data = finalfourgames) %>%\n  bind_cols(finalfourgames) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nfinalfour <- lightgbm_fit %>% \n  predict(new_data = finalfourgames, type=\"prob\") %>%\n  bind_cols(finalfour) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nfinalfour\n\n\n# A tibble: 2 × 14\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ game_id\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <int>\n1 L             0.405   0.595 Colgate    Gonzaga    1.33    36     0.626  4.02e8\n2 W             0.537   0.463 Texas A&M… Oral R…    1.18    35.4   0.529  4.02e8\n# … with 5 more variables: game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_total_rebounds <dbl>, team_efg <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_ppp,\n#   ⁴​opponent_total_rebounds, ⁵​opponent_efg\n\n\nCode\nnattychampionship <- tibble(\n  team_short_display_name=\"Texas A&M-CC\",\n  opponent_short_display_name=\"Gonzaga\"\n) \n\nnattychampionship <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(nattychampionship)\n\nnattychampionship <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(nattychampionship) \n\n\nnattychampionship <- lightgbm_fit %>% \n  predict(new_data = nattychampionship) %>%\n  bind_cols(nattychampionship) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nnattychampionship <- lightgbm_fit %>% \n  predict(new_data = nattychampionship, type=\"prob\") %>%\n  bind_cols(nattychampionship) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nnattychampionship\n\n\n# A tibble: 1 × 14\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ game_id\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <int>\n1 L             0.445   0.555 Texas A&M… Gonzaga    1.33      36   0.626  4.02e8\n# … with 5 more variables: game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_total_rebounds <dbl>, team_efg <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_ppp,\n#   ⁴​opponent_total_rebounds, ⁵​opponent_efg\n\n\nI ended up somehow in eleventh place in my class, I was in dead last position until Gonzaga made that run and I had them winning it all. A lot of my competitors including my instructor had Gonzaga winning it all. What really happened? Gonzaga got absolutely obliterated by UConn. They eventually went on to win the NCAA March Madness Tournament.\nMarch is known for a lot of Cinderella stories. I think Florida Atlantic was a team whom not a lot of people expected to make the final four and was a Cinderella story. I think in my whole class, my model was able to predict two wins which were completely unexpected.\nMy model picked the mighty Princeton winning against Arizona, which in fact did happen. My model also had Fairleigh Dickinson (FDU) winning against the number one seed in the West region, the Purdue Boilermakers. FDU ended up winning that match-up 63-58, knocking the Purdue Boilermakers. These were the only highlights of my first NCAA bracket, and those were my Cinderella stories.\nThe model did not favor the higher seeded teams at all. I had Alabama, Houston and Kansas all go out in the first round as per my model and those were some pretty atrocious misses as they were the number one seeds of their respective regions.\nWe all were competitive, but I had given up on my model when I ran it and got the results and named my NCAA bracket accordingly. “March Sadness,” I felt that was an appropriate name for the horrific bracket I had.\nTo conclude, this was definitely a fun experience. It was not the best when it came to results, but I am still glad that I was able to pull two mega upsets. I had Texas A&M Corpus Christi and the Gonzaga Bulldogs in the Championship game. One team is believable, the other team had no right to even be in that conversation. I will let you decide which teams those are. It was not a surprise to see my model pick the Gonzaga Bulldogs in the championship game. My model and going back to the metrics were heavily offensively minded. Gonzaga were one of the best offensive teams in the country entering the tournament.\nYou live, you learn and move on."
  },
  {
    "objectID": "posts/ronaldo-vs-messi/index.html",
    "href": "posts/ronaldo-vs-messi/index.html",
    "title": "Cristiano Ronaldo vs Lionel Messi, Greatness Personified",
    "section": "",
    "text": "Cristiano Ronaldo and Lionel Messi are two players who have competed against each other over the past decade in world football. It is no doubt that greatness is the only word that can define both of these players. Before the start of the 2003/2004 season, Manchester United signed Cristiano Ronaldo, at that time it was reported to have been a British record for the transfer fees for a teenage player. Ronaldo wore the iconic number 7 shirt at Man United, where he became a fan favorite winning numerous trophies at the club, including one Ballon d’Or trophy. He eventually made his move to Real Madrid, on the flip side, a young Argentine boy coming up the ranks in Barcelona, who was none other than Leo Messi. Messi played for Barcelona and Ronaldo played for Madrid during the prime of their careers, this turned it to be a rivalry between both players given the fact that when Barcelona and Real Madrid play against each other, is a rivalry by itself, termed as the “El Classico.”\nRonaldo and Messi have had fantastic individual careers, and like Basketball you always have the “GOAT” conversation which translates to the Greatest of All Time, when it came to Micheal Jordan or Lebron James. In world football, football fans also come up with this question all the time, between Cristiano Ronaldo and Leo Messi. Ronaldo is a right-footed player, who depended on his physical attributes while on the other hand, you have Leo Messi who is a dominant left-footed player, and the game came naturally to him, Ronaldo worked hard and Messi was a naturally gifted player. They are opposite players in terms of style, this could be one of the reasons why they matched up so well. They both are legends of this sport, given that we are in the year 2021, both of them are still doing well, although Ronaldo made his move to Juventus a few seasons ago, Well one thing that can split these two players are stats of their careers over time.\nHere’s a look at some data.\n\n\nCode\nlibrary(tidyverse)\nlibrary(scales)\nlibrary(ggrepel)\nlibrary(waffle)\n\n\n\n\nCode\nBest <- read_csv(\"goats.csv\")\n\n\nI will be using one data set, where I have pulled my data from Sports Reference’s soccer site, this mainly deals with Ronaldo’s and Messi’s statistics in terms of their goals scored across various club competitions, assists made over time, minutes played across the various seasons and the yellow and red cards they have accumulated over time.\nThe first question that comes to anyone who watches football would be Goals, as a matter of fact, Ronaldo and Messi are attacking players. They have scored some memorable goals throughout their careers, but since we are trying to answer who is the better player, we look through their goals going back to their very first seasons as pro footballers up until their current season. This includes goals from open play and penalty goals scored.\nTo do this, I mainly look at the age and the player and I sum up the goals of their respective careers. I also find the cumulative goals which will help tell the goals scored at what age for my first visualization.\n\n\nCode\ngoal <- Best %>%\n  group_by(Age, Player) %>%\n  summarise(total = sum(Gls))  %>% \n  arrange(Player) %>% \n  group_by(Player) %>% \n  mutate(\n   cumulativetotal= cumsum(total)\n  )\n\n\n`summarise()` has grouped output by 'Age'. You can override using the `.groups`\nargument.\n\n\nThis brings me to my first chart, this Step chart shows you the goals scored as both the players grew in age.\n\n\nCode\nggplot() + \n  geom_step(data = goal, aes(x= Age, y=cumulativetotal, group = Player, color = Player)) +\n  labs(x=\"Age\", \n       y=\"Cumulative Goals\", \n       title=\"Ronaldo just edges past Messi in career goals\", \n       subtitle=\"Leo Messi just lagging behind by two goals compared to Cristiano Ronaldo.\", \n       caption=\"Source: Sports-Reference.com | By Samvruth Raj\") +  \n  scale_color_manual(values = c(\"orangered\", \"purple1\")) +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 12, face = \"bold\"),\n    axis.title = element_text(size = 9), \n    plot.subtitle = element_text(size=10)\n    )\n\n\n\n\n\nWell, looking at this chart, you can see how close these two players are in terms of goals scored, with Ronaldo having two more goals. The tally for these players in terms of goals scored is Cristiano Ronaldo: 620 goals, Leo Messi: 618 goals. I also have too mention this does not include goals scored at the International level of football, which eliminates goals scored by Ronaldo for his country Portugal and goals scored by Messi for his country Argentina. Ronaldo would be ahead if we counted goals scored for their respective countries, as he is the current active footballer with the most goals for any country. Since I am worried about club football, given the fact that they play more club football than football with their national teams. This chart goes to tell the fans who have always wondered who had more goals, statistically, Ronaldo does, but it is so close!\nWell naturally the next question which arises, is the various club competitions. Messi has played for Barcelona (Spain) all his life, and Ronaldo has played for four different clubs which include Sporting CP (Portugal), Manchester United (England), Real Madrid (Spain), and Juventus (Italy). While Messi has just played competitions in Spain, Ronaldo has seen it all in different countries. Let us see how they match up against each other in club competitions.\nTo do this, I pick out the age, player, and competition type this would help segregate the competitions by type, for example, Domestic competitions would be Premier League, La Liga. Cup competitions for example would be the Copa Del Rey and the FA cup.\n\n\nCode\nComp <- Best %>%\n  group_by(Age, Player, CompType) %>%\n  summarise(total = sum(Gls))  %>% \n  arrange(Player, CompType) %>% \n  group_by(Player, CompType) %>% \n  mutate(\n   cumulativetotal= cumsum(total)\n  )\n\n\n`summarise()` has grouped output by 'Age', 'Player'. You can override using the\n`.groups` argument.\n\n\nThis is a Facet wrap, which includes small step charts for each competition.\n\n\nCode\nggplot() + \n  geom_step(data = Comp , aes(x= Age, y=cumulativetotal, group = Player, color = Player)) +\n  facet_wrap(.~CompType) +\n  labs(x=\"Age\", \n       y=\"Cumulative Goals\", \n       title=\"Ronaldo storms past Messi in Champions League goals and Domestic goals\", \n       subtitle=\"While Messi has the upper-hand in goals scored in Cup competitions.\", \n       caption=\"Source: Sports-Reference.com | By Samvruth Raj\") +  \n  scale_color_manual(values = c(\"orangered\", \"purple1\")) +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 12, face = \"bold\"),\n    axis.title = element_text(size = 9), \n    plot.subtitle = element_text(size=10), \n    )\n\n\n\n\n\nThis chart shows the goals scored across the competitions, While Ronaldo has a front foot in the Domestic Leagues and the Champions League, Messi is ahead on the Domestic Cup competitions.\nMoving on from goals, another important statistic in football are assists. These are passes, crosses, or plays that help you score goals. Without an assist, there are no goals, unless it is a Penalty or Direct free-kick scored.\nFans often say “Ronaldo is a greedy player,” “he wants to score all the goals,” and on the other hand “Messi provides for his team,” “He’s more of a team player,” Well, let’s put that to the test. Ronaldo plays an attacking position, which should result in more goals than assists, and Messi has played different positions, he is played as a right-winger and also played in the midfield, this means he would provide for his team and score, but let us see who has more assists over each other.\nTo do this, I start picking their ages and the two player’s and add up the assists over time.\n\n\nCode\nAssists <- Best %>%\n  group_by(Age, Player) %>%\n  summarise(total = sum(Ast)) %>% \n  drop_na()\n\n\n`summarise()` has grouped output by 'Age'. You can override using the `.groups`\nargument.\n\n\nThis brings me to my third chart, a Line chart that shows their ages and assists provided over a period of time.\n\n\nCode\nggplot() + \n  geom_line(data = Assists , aes(x= Age, y=total, group = Player, color = Player))+\n  labs(x=\"Age\", \n       y=\"Assists\", \n       title=\"Leo Messi miles ahead in being the better teammate\", \n       subtitle=\"While Ronaldo loves his goals, Messi loves an assist and a goal.\", \n       caption=\"Source: Sports-Reference.com | By Samvruth Raj\") +  \n  scale_color_manual(values = c(\"orangered\", \"purple1\")) +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 12, face = \"bold\"),\n    axis.title = element_text(size = 9), \n    plot.subtitle = element_text(size=10),\n    )\n\n\n\n\n\nThis should not be a surprise, given the fact Ronaldo is more of a goal scorer. Messi as I have stated above has played different positions and has had more assists throughout his career. The exact number would be Ronaldo: 192 assists, Leo Messi: 251 assists. This chart shows you at what age vs the number of assists provided based on the age of the player. Is it safe to say Ronaldo is greedy? or Messi is a team player. My answer would be yes, but that does not define whose an overall better player.\nMoving Further,\nGiven both of these players’ current ages Ronaldo: 36 years, and Messi: 33 years. I wanted to see how many minutes they have played over each age of their careers. This by no means is to compare which player has more minutes and he is better. This helps understand and compare their overall respective careers for both of these players.\nTo do this, as usual, I pick up both the players and then their ages and sum up the minutes played.\n\n\nCode\nMP <- Best %>%\n  group_by(Age, Player) %>%\n  summarise(total = sum(Min))  %>% \n  arrange(Player)\n\n\n`summarise()` has grouped output by 'Age'. You can override using the `.groups`\nargument.\n\n\nThis is a Line chart based on minutes played at what age.\n\n\nCode\nggplot() + \n  geom_line(data = MP, aes(x= Age, y=total, group = Player, color = Player))+\n  geom_text(aes(x=25, y=2500, label= \"injuries/DNP\"), color = \"lightseagreen\", size = 3.5) +\n  scale_y_continuous(labels = comma) +\n  labs(x=\"Age\", \n       y=\"Minutes Played\", \n       title=\"Messi and Ronaldo playing more minutes as they grow in age\", \n       subtitle=\"With Ronaldo playing more minutes overall given that he is three years the senior.\", \n       caption=\"Source: Sports-Reference.com | By Samvruth Raj\") +  \n  scale_color_manual(values = c(\"orangered\", \"purple1\")) +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 12, face = \"bold\"),\n    axis.title = element_text(size = 9), \n    plot.subtitle = element_text(size=10)\n    )\n\n\n\n\n\nGiven the caliber of both these players, this is a very close chart. There are a few dips that can account for injuries or they just did not play (DNP) as many games early on in their careers. The total number of minutes played by these respective players are Cristiano Ronaldo: 65,437 minutes and Leo Messi: 57,903 minutes played, hopefully, many more to come. This is a mere comparison of the minutes played because you would expect them to play each and every single match. Ronaldo has the upper hand, as he started playing before Messi and his three years older as well.\nThe final comparison I am going to look at is the accumulation of suspensions, in terms of Yellow and Red Cards from the start of their careers until the present. While this can be one of the most debated topics about the referee giving out a Yellow or Red card, let’s see who has more bookings to their name in the referee’s books. This cannot be justified as the referee never talks about the decisions they make. This is just a comparison so that people have an idea, and again this cannot prove whose the better player. This can make an argument of who the more heated player on the pitch.\nTo do this, I first pick the players, and sum up the red and yellow cards for each player, their age is not significant in this comparison as we are looking over time and only want the total number of cards.\n\n\nCode\nRedYellow <- Best %>% \n  group_by(Player) %>% \n  summarise(Redtotal = sum(CrdR),\n            YellowTotal = sum(CrdY))\n\n\n\n\nCode\nred <- c(\"Cristiano Ronaldo\" = 10, \"Lionel Messi\" = 1)\nyellow <- c(\"Cristiano Ronaldo\" = 97, \"Lionel Messi\" = 72)\n\n\nThe next two charts are waffle charts showing the Yellow and Red Cards received by Cristiano Ronaldo and Leo Messi.\n\n\nCode\nwaffle(\n  red,\n  rows = 2,\n  xlab = \"1 card = 1 square\",\n  color = c(\"firebrick1\", \"red3\")\n    ) +\n  labs( \n       title=\"Ronaldo has seen the locker room more than Leo Messi during matches\", \n       subtitle=\"Messi has been sent off only once, compared to Ronaldo who has been sent off ten times.\", \n       caption=\"Source: Sports-Reference.com | By Samvruth Raj\") +\n  theme(\n    plot.title = element_text(size = 12, face = \"bold\"),\n    axis.title = element_text(size = 9), \n    )\n\n\n\n\n\nThe first waffle chart shows the number of red cards for both the players, a red card is a card shown by a referee to a player in a match when there is extreme foul play. Ronaldo has 10 red cards to his name in club competitions while Messi just has one red card. A red card can ban you for the next game or the next three games depending on if it was a straight red or two yellow cards which converts into a red card. A straight red card bans you for three games, while two yellow cards in the same game convert into a red card can ban you for one game. This means Ronaldo has left the pitch 10 times, compared to Messi which was just once. A red card is rare and can be given only in extreme conditions, however, Yellow cards are much more frequently given. To make it clear, Ronaldo is represented by the lighter red color, while Messi is represented with the darker red color.\nFurther on, Yellow cards.\n\n\nCode\nwaffle(\n  yellow,\n  rows = 7,\n  xlab = \"1 card = 1 square\",\n  color = c(\"gold\", \"yellow2\")\n  ) +\n  labs( \n       title=\"Referees' issuing more warnings to Ronaldo, compared to Messi\", \n       subtitle=\"Messi has gone into the book fewer times than Ronaldo has.\", \n       caption=\"Source: Sports-Reference.com | By Samvruth Raj\")+\n  theme(\n    plot.title = element_text(size = 12, face = \"bold\"),\n    axis.title = element_text(size = 9), \n    )\n\n\n\n\n\nThis is the second waffle chart, this shows the number of yellow cards for both the players. A yellow card is deemed as a warning after collecting a few fouls, this is the initial warning to a player. Once a player is on a yellow card he/she must be cautious as another yellow card can convert to a red card, this sees you out of the match and you are likely to be banned for the next match. Ronaldo has received 97 yellow cards, while Messi has received 72 yellow cards respectively. To make it clear, Ronaldo is represented by the darker yellow color, while Messi is represented with the lighter yellow color.\nFrom both of the waffle charts, Ronaldo has more red/yellow cards throughout his career compared to Messi. Some might argue he is the more heated player, but the truth is the referee’s also make mistakes and sometimes the cards received by players are not completely justified.\nWell looking at my whole analysis, here comes the question, who is the better player? it is very close. They are both great players of our generation and instead of constantly comparing the two players. let’s take a moment to appreciate the greatness. Both the players have won every trophy that is there to win at club football. They have strong personal accolades as well, Leo Messi has won the Ballon d’Or trophy six times and Cristiano Ronaldo has won the Ballon d’Or trophy five times. A Ballon d’Or is a trophy that is presented to the player who performs the best in the previous season. Although Messi has won it a record six times, Ronaldo has won it five times and yet again this is a close statistic. Given the ages of both the players, Ronaldo who is 36, and Messi who is 33. Let’s make the most while they are still playing the sport of football then try and compare them. With the emerging lights of Kylian Mbappe and Erling Haaland, who might take the next center stage in world football, let us appreciate Cristiano Ronaldo and Lionel Messi while we still can, and I am sure every fan would like to see both of them play together on the same team, it is a long shot, but anything can happen in football."
  },
  {
    "objectID": "posts/do-manchester-united-players-have-worst-contracts/index.html",
    "href": "posts/do-manchester-united-players-have-worst-contracts/index.html",
    "title": "Do Manchester United Players have the worst contracts amongst the Big 6 Clubs?",
    "section": "",
    "text": "Manchester United has not won the English Premier League title ever since Sir Alex Ferguson, retired from his role as manager after the 2012/13 season. To this day, his successors David Moyes, Louis Van Gaal, Jose Mourinho, and Ole Gunnar Solskjaer have not been able to get success back to Old Trafford. David Moyes was chosen as the replacement right after Sir Alex retired, however, Moyes did not last long as manager, following Moyes, Louis Van Gaal was at the club from 2014 to 2016, where he managed to win just one cup competition which was the FA Cup. Jose Mourinho was then given the job, in his first season as United manager, he led the team to the FA Community Shield, the League Cup, and the UEFA Europa League, the Red Devils also finished second place, right behind their rivals Man City, who went on to lift the Premier League title in the 2017/18 season. Following Mourinho’s dismissal, Ole Gunnar Solskjaer was appointed the interim boss for the remainder of the season and eventually penned a three-year deal with the Red Devils. Under Ole, Man United has not managed to win any silverware, losing four semifinals and a quarterfinal respectively. Well, one of the reasons Manchester United was so dominant before Sir Alex’s retirement, was good recruitment of players. United has desperately struggled with the recruitment of players, and over the past few years, players like, Angel Di Maria, Radamel Falcao, Alexis Sanchez, who have simply not fit United’s philosophy. Man United is known to give their players enormous contracts which eventually hurt the financials of the club, given that these signings do not perform and eventually leave the club. Ever since Ole has got the permanent job, United seems to be doing just fine in terms of bringing players to Old Trafford, however, work needs to be done if Manchester United wants their glory days back.\nHere’s a look at some data.\n\n\nCode\nlibrary(tidyverse)\nlibrary(scales)\nlibrary(ggrepel)\n\n\n\n\nCode\nPL <- read_csv(\"EPlplayers2021.csv\")\n\n\nI will be using one data set, where I have pulled the data from Sports Reference’s Soccer site which mainly deals with the Premier League data only, and I have also looked at Transfer market, to find the current Transfer Values of Manchester United players and players from the Big Six clubs.\nSince I wanted to just look at Manchester United, before I could compare them to the Big Six clubs, I filtered Manchester United out from my data set which had all the 20 Premier League teams. I also wanted to look at players with over 100 minutes, which rules out players coming up from the Academy, it would be unfair to look at their contracts as they are still breaking into the first team. It would also rule out players who picked long-term injuries right at the start of the season.\n\n\nCode\nMUTD <- PL %>% filter(Squad == \"Manchester Utd\") %>% \n  filter(Min > 100)\n\n\nFirst, I was curious to see the amount of money these players make per minute, doing some work with the data, I used their current transfer values, with the number of minutes they have played this season. I could have used the current wages, but I went a step ahead and say these players were to be sold in the upcoming seasons?\n\n\nCode\nPPM <- MUTD %>%\n  mutate(PayPerMinute = TransferMarketvalue/Min)\n\n\nThis brings me to my first chart, this Bar chart shows you the players and how much they get paid per minute.\n\n\nCode\nggplot() +\n  geom_bar(data=PPM, aes(x= reorder(Player, PayPerMinute), weight=PayPerMinute)) + \n  coord_flip()+ \n  labs(x=\"Player\", \n       y=\"Dollar Per Minute\", \n       title=\"Van De Beek is the Highest Earner, with the Lowest Minutes played.\", \n       subtitle=\"Will this season be the end at Old Trafford for the Dutchman?\", \n       caption=\"Source: Sports-Reference.com | By Samvruth Raj\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 12, face = \"bold\"),\n    axis.title = element_text(size = 9), \n    plot.subtitle = element_text(size=10), \n    )\n\n\n\n\n\nWell, looking at this bar chart, I am not surprised Donny Van De Beek tops the chart with the most money being earned compared to the minutes he has played this season, Alex Telles is another summer signing who we all expected to play a lot more, but given Luke Shaw’s current form, Ole sees Alex Telles more on the bench than on the pitch. This chart explains the amount of money the current Manchester United players earn, given the number of minutes they have played this season in the Premier League.\nMoving on,\nManchester United as most of us know is considered a “Big Six,” club, with Arsenal, Chelsea, Liverpool, Manchester City, and Tottenham making up the rest. I wanted my analysis to extend and compare Man United to these other clubs.\nOver here, going back to my Premier League Data which consists of all the 20 clubs, I am interested in only those Big Six clubs, so I take them out of the data set to further my analysis.\n\n\nCode\nBigSix <- c(\"Arsenal\" , \"Chelsea\" , \"Liverpool\" , \"Manchester City\" , \"Manchester Utd\" ,\"Tottenham\")\nBigSixData <- PL %>% filter(Squad %in% BigSix)\n\n\nNow that I have my data, I went ahead and found the average minutes played this season and the average transfer value of the players.\n\n\nCode\nBigSixData %>% summarise(Transfermarketvalueaverage = mean(TransferMarketvalue, na.rm = TRUE),\n                         Averageminutes = mean(Min, na.rm = TRUE))\n\n\n# A tibble: 1 × 2\n  Transfermarketvalueaverage Averageminutes\n                       <dbl>          <dbl>\n1                  36056319.          1180.\n\n\nWell, this brings me to my second chart, rather a scatter plot, not so much a chart.\n\n\nCode\nggplot()+\n  geom_point(data = BigSixData, aes(x= TransferMarketvalue, y= Min), color = \"grey\") +\n  geom_point(data = MUTD, aes(x=TransferMarketvalue, y=Min), color = \"#DA291C\") + \n  geom_text_repel(data= MUTD, aes(x= TransferMarketvalue, y= Min, label= Player), size = 3) +\n  geom_vline(xintercept = 36056319, color= \"dark grey\") +\n  geom_hline(yintercept =1179.795, color= \"dark grey\" ) +\n  geom_text(aes(x=100000000, y=0, label=\"High Transfer Market Value, low minutes played\"), color = \"red\", size = 3) +\n  geom_text(aes(x=100000000, y=3000, label=\"High Transfer Market Value, high minutes played\"), color = \"red\", size=3) +\n  scale_x_continuous(labels = comma) + \n  labs(x=\"Transfer Market Value\", \n       y=\"Minutes Played\", \n       title=\"Manchester United Players are where they should be.\", \n       subtitle=\"With some of their players futures in question?\", \n       caption=\"Source: Sports-Reference.com | By Samvruth Raj\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 13, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) \n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nHere I have all the Manchester United Players in red dots compared them to all the players in the Big Six, they are represented in grey dots. I also have two lines that show the average minutes played and the average transfer values based on this season’s stats.\nLooking at this scatter plot, there are four sides, starting upper-left side you have players who fit “low transfer Value, with high minutes played,” under that, which is the lower-left side you have players who fit “low transfer value, low minutes played, following towards the upper-right side you have players who fit”high transfer value, high minutes played,” and finally lower-right side you have players who fit “high transfer value, low minutes played.”\nMy take from this, that I am surprised to see that most of the starting eleven players for United are in the Upper left and right side, given that United’s players performance is always under question in the media, with only Bruno Fernandes and Marcus Rashford being in the little extreme upper left side. No surprises where Donny Van De Beek is at, as again goes back to my previous chart, he earns a lot of money per minute, with no minutes under his belt, and he has a fairly decent transfer value amount. This scatter plot was made, mainly to look at the Man United players comparing them to players on the Big Six clubs with the number of minutes played this season and what their transfer values are if they were to be sold.\nSo far, so good.\nFurthermore,\nWhen we talk about Football, what everyone talks about are Goals, it probably is the most everyone remembers, spoken about, are Goals period. You can argue that referee decisions, penalties, red cards, and yellow cards. I would agree, but goals are what you are remembered for and sometimes it attracts clubs who want to buy you! Often attacking players make more money than defensive players, given that they have bonuses and different clauses in their contracts.\nSo to further my analysis, I went ahead and filtered out the forwards and midfielders, from the Big Six clubs, questioning why no defenders and keepers? the simple answer to that would be Defenders mainly score off set pieces and I cannot recollect the last time a goalKeeper scored and it is simply not fair to include them, as their job is defending the goal not scoring, and creating chances. I made sure I had players who had more than 100 minutes to rule out injured and young players who don’t play that much football.\n\n\nCode\nAttack <- c(\"FW\" , \"MF\" , \"MFFW\") \n\nAttackers <- BigSixData %>% filter(Pos %in% Attack) %>% filter (Min > 100)\n\n\nHere I go back to finding the pay per minute for the attacking or forward players, using their Transfer Market value and the number of minutes played this season. I also filtered out Manchester United’s attacking players for my third plot.\n\n\nCode\nAttackPPm <- Attackers %>% \n  mutate(ppm = TransferMarketvalue/Min)\n\nMU <- AttackPPm %>%  \n  filter(Squad == \"Manchester Utd\") %>%\n  filter(Min > 100)\n\n\nOne last step before you see my third plot is finding the average goals scored and the average pay per minute.\n\n\nCode\nAttackPPm %>% summarise(GoalAverage = mean(Gls, na.rm = TRUE), \n                        PPmAverage = mean(ppm, na.rm = TRUE))\n\n\n# A tibble: 1 × 2\n  GoalAverage PPmAverage\n        <dbl>      <dbl>\n1        3.67     43110.\n\n\nThere you go, this brings you to my third scatter plot.\n\n\nCode\nggplot()+\n  geom_point(data = AttackPPm, aes(x= ppm, y= Gls), color= \"grey\")+\n  geom_point(data = MU, aes(x = ppm, y = Gls), color = \"#DA291C\" ) +\n   geom_text_repel(data= MU, aes(x= ppm, y= Gls, label= Player), size = 2.5) +\n  geom_vline(xintercept = 46346.62, color = \"dark grey\") +\n  geom_hline(yintercept =3.711864, color = \"dark grey\" )+\n  geom_text(aes(x=10000, y=17, label=\"High goals, low PPM\"), color = \"red\", size = 3) +\n  geom_text(aes(x=125000, y=17, label=\"High goals, high PPM\"), color = \"red\", size=3) +\n  scale_x_continuous(labels = comma) + \n  labs(x=\"Pay Per Minute (PPM)\", \n       y=\"Goals Scored\", \n       title=\"Is only Manchester United Struggling with their Player's contracts?\", \n       subtitle=\"Players from other Big Six club's have bad contracts as well!\", \n       caption=\"Source: Sports-Reference.com | By Samvruth Raj\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 13, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    ) \n\n\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n\n\n\n\n\nYou have seen this before, again, the scatter plot is split into four sides, starting upper-left you have players who fit “high goals scored and low PPm,” under that, which is the lower-left side you have players who fit “low goals, low PPm,” to your upper-right side you have players who fit “high goals, high PPm,” and finally lower-right side you have players who fit “low goals, High Ppm.” The two lines which split the scatter plot into the four sides are the average goals scored line and the average pay per minute line.\nMy take, am I surprised at the United Attack? Yes and no.\nMarcus Rashford and Bruno Fernandes are the ones who are performing week in and week out and are paid less, on the flip side, Paul Pogba and poor Donny Van de Beek, are getting paid way more than what they should be, I feel bad for going after Donny but the stats don’t lie, but I honestly think he will shine in a United Shirt, first seasons are always hard for players coming in from abroad, that is provided he chooses not to leave the club.\nGoing back to the ending of my first paragraph of this blog? I spoke about Ole Gunnar Solskjaer, who is the current manager, saying that United are doing just fine in terms of recruitment, I would agree with that, yes some players are still getting paid a lot of money and not performing or playing, you cannot get everything right in football, sometimes a player just does not fit the philosophy, and looking at my third scatter plot, is it only Donny in the lower left side? you have other dots in grey who are from big six clubs. That answers that United players are not the only ones with bad contracts compared to the Big Six.\nI promise you this is the last part of my blog, I created a model to see if getting paid per minute and scoring goals have a relationship with each other.\n\n\nCode\nAttackingModel <- lm(Gls~ppm, data = AttackPPm)\nsummary(AttackingModel)\n\n\n\nCall:\nlm(formula = Gls ~ ppm, data = AttackPPm)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-4.359 -3.166 -1.817  1.957 13.477 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  4.412e+00  1.040e+00   4.244 7.74e-05 ***\nppm         -1.593e-05  2.013e-05  -0.791    0.432    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.512 on 60 degrees of freedom\n  (1 observation deleted due to missingness)\nMultiple R-squared:  0.01033,   Adjusted R-squared:  -0.006166 \nF-statistic: 0.6262 on 1 and 60 DF,  p-value: 0.4319\n\n\nI am not a math person, and I don’t like numbers but you won’t have to worry about the numbers, because I will explain what’s going on. Again, I should not be surprised because goals scored and getting paid per minute do not have a relationship. Needless to say that they aren’t statistically significant. Again football is just not about goals and money for an attacking player, it can be so much more, for example, Assists, key passes, tackles which all are not here in this model, so the simple answer nope goals scored and being paid per minute are not related. I was curious to see if there was anything, sadly I did not get much out of this model."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "I finally filled my first ever NCAA bracket using Machine Learning\n\n\n\n\n\n\n\nNCAA Bracket\n\n\nCollege Basketball\n\n\nMachine Learning\n\n\n\n\n\n\n\n\n\n\n\nApr 24, 2023\n\n\nSamvruth Raj\n\n\n\n\n\n\n  \n\n\n\n\nCristiano Ronaldo vs Lionel Messi, Greatness Personified\n\n\n\n\n\n\n\nfootball\n\n\nsoccer\n\n\n\n\n\n\n\n\n\n\n\nApr 19, 2021\n\n\nSamvruth Raj\n\n\n\n\n\n\n  \n\n\n\n\nDo Manchester United Players have the worst contracts amongst the Big 6 Clubs?\n\n\n\n\n\n\n\nsports\n\n\nfootball\n\n\nsoccer\n\n\n\n\n\n\n\n\n\n\n\nApr 1, 2021\n\n\nSamvruth Raj\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]